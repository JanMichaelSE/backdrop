name: Create Release

on:
  pull_request:
    types:
      - closed
    branches:
      - main
    paths-ignore:
      - ".github/**"

jobs:
  version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21"]
    outputs:
      backdrop-version: ${{ steps.publish.outputs.version }}
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build project
        run: go build

      - name: Get version
        id: publish
        run: |
          version=$(./backdrop -v | cut -d " " -f3)
          echo "version=$version" >> $GITHUB_OUTPUT

  release:
    needs: version
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-new-release.outputs.upload_url }}

    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Version verification
        run: echo "Version to release:" "${{ needs.version.outputs.backdrop-version }}"

      - name: Create Release
        uses: actions/create-release@v1
        id: create-new-release
        with:
          draft: false
          prerelease: false
          release_name: v${{ needs.version.outputs.backdrop-version }}
          tag_name: v${{ needs.version.outputs.backdrop-version }}
          body_path: .github/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Artifacts:
    needs: [version, release]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.21"]
    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      # Build Linux Artifact
      - name: Build Linux Artifact
        run: go build

      # Build Windows Artifcat
      - name: Build Windows Artifact
        run: GOOS=windows GOARCH=amd64 go build -o backdrop.exe

      # Compress Artifacts
      - name: Compress Linux Artifact
        run: tar -czvf backdrop-gnome-desktop-v${{ needs.version.outputs.backdrop-version }}.linux-amd64.tar.gz backdrop

      - name: Compress Windows Artifact
        run: zip backdrop-v${{ needs.version.outputs.backdrop-version }}.windows-amd64.zip backdrop.exe

      # Upload Artifacts
      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: backdrop-gnome-desktop-v${{ needs.version.outputs.backdrop-version }}.linux-amd64.tar.gz
          asset_name: backdrop-gnome-desktop-v${{ needs.version.outputs.backdrop-version }}.linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: backdrop-v${{ needs.version.outputs.backdrop-version }}.windows-amd64.zip
          asset_name: backdrop-v${{ needs.version.outputs.backdrop-version }}.windows-amd64.zip
          asset_content_type: application/zip
